"""
A command can be one of four things:

1. An executable program like all those files we saw in /usr/bin. Within this
category, programs can be compiled binaries, such as programs written in
C and C++, or programs written in scripting languages, such as the shell,
Perl, Python, Ruby, and so on.

2. A command built into the shell itself. bash supports a number of commands
internally called shell builtins. The cd command, for example, is a
shell builtin.

3. A shell function. Shell functions are miniature shell scripts incorporated
into the environment. We will cover configuring the environment and
writing shell functions in later chapters, but for now just be aware that
they exist.

4. An alias. An alias is a command that we can define ourselves, built from
other commands.
"""

1) whatis

"""
Identifying Commands
It is often useful to know exactly which of the four kinds of commands is
being used, and Linux provides a couple of ways to find out.

type—Display a Command’s Type

The type command is a shell builtin that displays the kind of command the
shell will execute, given a particular command name. It works like this:
type command
where command is the name of the command you want to examine. Here are
some examples:
"""
[me@linuxbox ~]$ type type
type is a shell builtin
[me@linuxbox ~]$ type ls
ls is aliased to `ls --color=tty'
[me@linuxbox ~]$ type cp
cp is /bin/cp

"""
Here we see the results for three different commands. Notice that the ls
command (taken from a Fedora system) is actually an alias for the ls command
with the --color=tty option added. Now we know why the output from
ls is displayed in color!
"""

2) which
  """
  Sometimes more than one version of an executable program is installed on
  a system. While this is not very common on desktop systems, it’s not unusual
  on large servers. To determine the exact location of a given executable, the
  which command is used:
  """
  """
  which works only for executable programs, not builtins or aliases that
  are substitutes for actual executable programs. When we try to use which
  on a shell builtin (for example, cd), we get either no response or an error
  message:
  [me@linuxbox ~]$ which cd
  /usr/bin/which: no cd in (/opt/jre1.6.0_03/bin:/usr/lib/qt-3.3/bin:/usr/kerber
  os/bin:/opt/jre1.6.0_03/bin:/usr/lib/ccache:/usr/local/bin:/usr/bin:/bin:/home
  /me/bin)
  This is a fancy way of saying “command not found.”
  """
  
3) help—Get Help for Shell Builtins
bash has a built-in help facility for each of the "shell builtins". To use it, type
help followed by the name of the shell builtin. For example:

[me@linuxbox ~]$ help cd
cd: cd [-L|-P] [dir]

4) Many executable programs support a --help option that displays a description
of the command’s supported syntax and options. 
For example:

[me@linuxbox ~]$ mkdir --help
Usage: mkdir [OPTION] DIRECTORY...

5) apropos—Display Appropriate Commands
It is also possible to search the list of man pages for possible matches based
on a search term. Though crude, this approach is sometimes helpful. Here
is an example of a search for man pages using the search term floppy:

"""
[me@linuxbox ~]$ apropos floppy
create_floppy_devices (8) - udev callout to create all possible
floppy device based on the CMOS type
fdformat (8) - Low-level formats a floppy disk
floppy (8) - format floppy disks
gfloppy (1) - a simple floppy formatter for the GNOME
mbadblocks (1) - tests a floppy disk, and marks the bad
blocks in the FAT
mformat (1) - add an MSDOS filesystem to a low-level
formatted floppy disk

Note that the man command with the -k
option performs exactly the same function as apropos.
"""

6) info—Display a Program’s Info Entry
The GNU Project provides an alternative to man pages called info pages. Info
pages are displayed with a reader program named, appropriately enough,
info. Info pages are hyperlinked much like web pages

7) Most of the command-line programs we have discussed so far are part
of the GNU Project’s coreutils package, so you can find more information
about them by typing

[me@linuxbox ~]$ info coreutils

which will display a menu page containing hyperlinks to documentation for
each program provided by the coreutils package.

8) Many software packages installed on your system have documentation files
residing in the /usr/share/doc

9) Alias: 
Great! foo is not taken. So let’s create our alias:
[me@linuxbox ~]$ alias foo='cd /usr; ls; cd -'

10) We can also use the type command again to see our alias:

[me@linuxbox ~]$ type foo
foo is aliased to `cd /usr; ls ; cd -'

To remove an alias, the unalias command is used, like so:

[me@linuxbox ~]$ unalias foo
[me@linuxbox ~]$ type foo
bash: type: foo: not found

11) [me@linuxbox ~]$ alias
alias l.='ls -d .* --color=tty'
alias ll='ls -l --color=tty'
alias ls='ls --color=tty'
