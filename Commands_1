1) date
2) cal
3) df -h : To see the current amount of free space on your disk drives, enter df:
4) free : Likewise, to display the amount of free memory, enter the free
          command:
5) ls ~ /root/Documents
6) ls -l,a,h,r (reverse),t (sort by modified time),S (sort), d (dir), F (type), R (Recursive)
7) whereis subl : gives the possible loction of the file "subl"
8) whatis subl : Gives the man page for "subl"
9) file <file_name> : what kind of file is it
10) Symbolic Links
As we look around, we are likely to see a directory listing with an entry
like this:
lrwxrwxrwx 1 root root

"""
Picture this scenario: A program requires the use of a shared resource
of some kind contained in a file named foo, but foo has frequent version
changes. It would be good to include the version number in the filename
so the administrator or other interested party could see what version of foo
is installed. This presents a problem. If we change the name of the shared
resource, we have to track down every program that might use it and change
it to look for a new resource name every time a new version of the resource
is installed. That doesn’t sound like fun at all.

Here is where symbolic links save the day. Let’s say we install version 2.6
of foo, which has the filename foo-2.6, and then create a symbolic link simply
called foo that points to foo-2.6. This means that when a program opens the
file foo, it is actually opening the file foo-2.6. Now everybody is happy. The
programs that rely on foo can find it, and we can still see what actual version
is installed. When it is time to upgrade to foo-2.7, we just add the file to our
system, delete the symbolic link foo, and create a new one that points to the
new version. Not only does this solve the problem of the version upgrade,
but it also allows us to keep both versions on our machine. Imagine that
foo-2.7 has a bug (damn those developers!) and we need to revert to the old
version.
"""

11) cp -u : Copy only when the source file is newer than the destination file. Or When the destination file is misisng.
          cp -u *.html <destination_folder>
          
12) cp dir1/* dir2 Using a wildcard, all the files in dir1 are copied into dir2. dir2 must already exist.

13) cp -r dir1 dir2 Copy directory dir1 (and its contents) to directory
          dir2. If directory dir2 does not exist, it is created and
          will contain the same contents as directory dir1.
          
14) ln—Create Links

The ln command is used to create either hard or symbolic links. It is used in
one of two ways:

ln file link (to create a hard link) 
and
ln -s item link (to create a symbolic link where item is either a file or a directory.)

Hard Links
"""
Hard links are the original Unix way of creating links; symbolic links are
more modern. By default, every file has a single hard link that gives the file
its name. When we create a hard link, we create an additional directory
entry for a file. Hard links have two important limitations:

1. A hard link cannot reference a file outside its own filesystem. This
means a link cannot reference a file that is not on the same disk partition
as the link itself.
2. A hard link cannot reference a directory.
A hard link is indistinguishable from the file itself. Unlike a directory

list containing a symbolic link, a directory list containing a hard link shows
no special indication of the link. When a hard link is deleted, the link is
removed, but the contents of the file itself continue to exist (that is, its space
is not deallocated) until all links to the file are deleted.
It is important to be aware of hard links because you might encounter
them from time to time, but modern practice prefers symbolic links, which
we will cover next.
"""

Soft Links

"""
In this regard they operate in much the
same way as a Windows shortcut, though of course they predate the Windows
feature by many years. ;-)
A file pointed to by a symbolic link and the symbolic link itself are
largely indistinguishable from one another. For example, if you write something
to the symbolic link, the referenced file is also written to. 

However,when you delete a symbolic link, only the link is deleted, not the file itself.
If the file is deleted before the symbolic link, the link will continue to exist
but will point to nothing. 

In this case, the link is said to be broken. In many
implementations, the ls command will display broken links in a distinguishing
color, such as red, to reveal their presence.
"""

15) creating Hard-Links
          1. [me@linuxbox playground]$ ln fun fun-hard
          2. [me@linuxbox playground]$ ln fun dir1/fun-hard
          3. [me@linuxbox playground]$ ln fun dir2/fun-hard
"""
So now we have four instances of the file fun. Let’s take a look at our
playground directory:
[me@linuxbox playground]$ ls -l

total 16

drwxrwxr-x 2 me me 4096 2012-01-14 16:17 dir1
drwxrwxr-x 2 me me 4096 2012-01-14 16:17 dir2
-rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun
-rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun-hard

One thing you notice is that the second field in the listing for fun and
fun-hard both contain a 4, which is the number of hard links that now exist
for the file. You’ll remember that a file will always have at least one link
because the file’s name is created by a link.
"""

"""
So, how do we know that fun
and fun-hard are, in fact, the same file? In this case, ls is not very helpful.
While we can see that fun and fun-hard are both the same size (field 5), our
listing provides no way to be sure they are the same file. To solve this problem,
we’re going to have to dig a little deeper.
"""

"""
When thinking about hard links, it is helpful to imagine that files are
made up of two parts: the data part containing the file’s contents and the
name part, which holds the file’s name. When we create hard links, we are
actually creating additional name parts that all refer to the same data part.

The system assigns a chain of disk blocks to what is called an inode, which is
then associated with the name part. Each hard link therefore refers to a specific
inode containing the file’s contents.

The ls command has a way to reveal this information. It is invoked with
the -i option:

[me@linuxbox playground]$ ls -li
total 16
12353539 drwxrwxr-x 2 me me 4096 2012-01-14 16:17 dir1
12353540 drwxrwxr-x 2 me me 4096 2012-01-14 16:17 dir2
12353538 -rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun
12353538 -rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun-hard

In this version of the listing, the first field is the inode number, and as
we can see, both fun and fun-hard share the same inode number, which confirms
they are the same file.
"""

16) Symbolic Links
          """
[me@linuxbox playground]$ ln -s fun fun-sym
[me@linuxbox playground]$ ln -s ../fun dir1/fun-sym
[me@linuxbox playground]$ ln -s ../fun dir2/fun-sym

The first example is pretty straightforward: We simply add the -s option
to create a symbolic link rather than a hard link. But what about the next
two? Remember, when we create a symbolic link, we are creating a text
description of where the target file is relative to the symbolic link. It’s easier
to see if we look at the ls output:

[me@linuxbox playground]$ ls -l dir1
total 4
-rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun-hard
lrwxrwxrwx 1 me me 6 2012-01-15 15:17 fun-sym -> ../fun


The listing for fun-sym in dir1 shows that it is a symbolic link by the leading
l in the first field and the fact that it points to ../fun, which is correct.
Relative to the location of fun-sym, fun is in the directory above it. Notice
too, that the length of the symbolic link file is 6, the number of characters
in the string ../fun rather than the length of the file to which it is pointing.
"""

17) Sym Links using Absolute paths

"""
When creating symbolic links, you can use either absolute pathnames,
like this:
[me@linuxbox playground]$ ln -s /home/me/playground/fun dir1/fun-sym

Using relative pathnames
is more desirable because it allows a directory containing symbolic
links to be renamed and/or moved without breaking the links.
"""

18) Sym Linking Directories

"""
[me@linuxbox playground]$ ln -s dir1 dir1-sym
[me@linuxbox playground]$ ls -l
total 16
drwxrwxr-x 2 me me 4096 2012-01-15 15:17 dir1
lrwxrwxrwx 1 me me 4 2012-01-16 14:45 dir1-sym -> dir1
drwxrwxr-x 2 me me 4096 2012-01-15 15:17 dir2
-rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun
-rw-r--r-- 4 me me 1650 2012-01-10 16:33 fun-hard
lrwxrwxrwx 1 me me 3 2012-01-15 15:15 fun-sym -> fun
"""
